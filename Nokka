#RizqPay

About
Get Started
Guides
Reference
Menu
GET STARTED
CHECKOUT UIS
TUTORIALS & EXAMPLES
üîù
Set Up Your Client
The Braintree JavaScript SDK has several ways for you to collect customer payment information. The easiest way to get up and running is via the Drop-in UI. For other integrations, please see the JS SDK Overview.

Token
Nonce
Nonce
Nonce
1
2
3
4
5
Your Client
Your Server
Braintree Server
Setup
Add Drop-in to your page:

HTML

Copy
<head>
  <meta charset="utf-8" />
  <script src="https://js.braintreegateway.com/web/dropin/1.40.2/js/dropin.min.js"></script>
</head>
<body>
  <!-- Step one: add an empty container to your page -->
  <div id="dropin-container"></div>

  <script type="text/javascript">
    // call 'braintree.dropin.create' code here
  </script>
</body>
CallbackPromise

Copy
// Step two: create a dropin instance using that container (or a string
//   that functions as a query selector such as '#dropin-container')
braintree.dropin.create({
  container: document.getElementById('dropin-container'),
  // ...plus remaining configuration
}, (error, dropinInstance) => {
  // Use 'dropinInstance' here
  // Methods documented at https://braintree.github.io/braintree-web-drop-in/docs/current/Dropin.html
});
Get a client token
To start up, Braintree.js needs a client token generated by your Braintree server SDK. To see how to generate one, please follow Simple Server (the next page) until you've completed the Generate a client token section.

Once you've generated a client token, embed it into your template.

CallbackPromise

Copy
braintree.dropin.create({
  // Step three: get client token from your server, such as via
 //    templates or async http request
  authorization: CLIENT_TOKEN_FROM_SERVER,
  container: '#dropin-container'
}, (error, dropinInstance) => {
  // Use 'dropinInstance' here
  // Methods documented at https://braintree.github.io/braintree-web-drop-in/docs/current/Dropin.html
});
There are a number of ways to get your client token into JavaScript so you can set up Braintree. Many people choose to interpolate the client token into the HTML/JavaScript itself; alternatively, you could load the client token from an AJAX call to an exposed client token URL on your server.

Test your integration
Create a sandbox account
If you haven't already, sign up for a free Braintree sandbox account:

Sign Up for a Braintree Sandbox Account 
Log in to obtain your sandbox API credentials. You'll need your:

Sandbox merchant ID
Public key
Private key
Use these credentials for your development and testing.

IMPORTANT
When you go live, you will need to replace your sandbox API credentials with production API credentials.

Test values
When testing in the sandbox, be sure to use our test card numbers (e.g. 4111111111111111) and nonces (e.g. fake-valid-nonce). Real payment method data will not work in the sandbox. See our Testing page for more details.

Send payment method nonce to server
A Braintree client-side integration sends payment information ‚Äì like a credit card or a PayPal authorization ‚Äì to Braintree in exchange for a payment method nonce, a one time use value that represents that payment method.

HTML

Copy
<head>
  <meta charset="utf-8" />
  <script src="https://js.braintreegateway.com/web/dropin/1.40.2/js/dropin.min.js"></script>
</head>
<body>
  <form id="payment-form" action="/route/on/your/server" method="post">
    <!-- Putting the empty container you plan to pass to
      'braintree.dropin.create' inside a form will make layout and flow
      easier to manage -->
    <div id="dropin-container"></div>
    <input type="submit" />
    <input type="hidden" id="nonce" name="payment_method_nonce" />
  </form>

  <script type="text/javascript">
    // call braintree.dropin.create code here
  </script>
</body>
CallbackPromise

Copy
const form = document.getElementById('payment-form');

braintree.dropin.create({
  authorization: 'CLIENT_AUTHORIZATION',
  container: '#dropin-container'
}, (error, dropinInstance) => {
  if (error) console.error(error);

  form.addEventListener('submit', event => {
    event.preventDefault();

    dropinInstance.requestPaymentMethod((error, payload) => {
      if (error) console.error(error);

      // Step four: when the user is ready to complete their
      //   transaction, use the dropinInstance to get a payment
      //   method nonce for the user's selected payment method, then add
      //   it a the hidden field before submitting the complete form to
      //   a server-side integration
      document.getElementById('nonce').value = payload.nonce;
      form.submit();
    });
  });
});
On your server, use a payment method nonce with a Braintree server SDK to charge a card or update a customer's payment methods.

world.greeted = true
At this point, you should have a working client-side checkout flow. When your user provides payment information, you receive a payment method nonce and send it to your server.

Next, your server closes the loop by using the payment method nonce to create a transaction.


Next Page: Simple Server ‚Üí
Get help from a human
Submit a request for help with your Braintree sandbox or production account.

Get Help
Braintreepayments.com|Support ArticlesStatus
Braintree is a service of PayPal. ¬© 2023 PayPal Privacy Policy | Lega<head>
  <meta charset="utf-8" />
  <script src=" 
 https://js.braintreegateway.com/web/dropin/1.40.2/js/dropin.min.js 
 "></script>
</head>
<body>
  <!-- Step one: add an empty container to your page -->
  <div id="dropin-container"></div>

  <script type="text/javascript">
    // call 'braintree.dropin.create' code here
  </script>
</bodysnippets/python/s/regex-terminal-letter-matches.md | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

 diff --git a/snippets/python/s/regex-terminal-letter-matches.md b/snippets/python/s/regex-terminal-letter-matches.md
 index 5176f9885b..729fbf4902 100644
 --- a/snippets/python/s/regex-terminal-letter-matches.md
 +++ b/snippets/python/s/regex-terminal-letter-matches.md
 @@ -28,5 +28,5 @@ def terminal_letter_matches(string, char1, char2=None):
  ```
   
    ```py
    -print(terminal_letter_matches("Elephants love to dance, but puffins prefer to eat waffles.", 'e', 's')) # ['Elephants']
    +terminal_letter_matches("Elephants love to dance, but puffins prefer to eat waffles.", 'e', 's') # ['Elephants']
     ```

     From 9be138c0ef63605613421fba178e51f8b82543cb Mon Sep 17 00:00:00 2001
     From: David Ekong <66387173+davidekong@users.noreply.github.com>
     Date: Fri, 28 Jul 2023 01:58:15 +0000
     Subject: [PATCH 3/3] Update regex-terminal-letter-matches.md

     Completed new md file
     ---
      .../python/s/regex-terminal-letter-matches.md | 26 +++++++++++++------
       1 file changed, 18 insertions(+), 8 deletions(-)

       diff --git a/snippets/python/s/regex-terminal-letter-matches.md b/snippets/python/s/regex-terminal-letter-matches.md
       index 729fbf4902..57244cabd3 100644
       --- a/snippets/python/s/regex-terminal-letter-matches.md
       +++ b/snippets/python/s/regex-terminal-letter-matches.md
       @@ -1,17 +1,21 @@
        ---
        -title: regex-terminal-letter-matches
        +title: Use regex to find all words with given start and stop characters
        +short title: Regex terminal character matches
         type: snippet
          language: python
          -tags: [utility]
          -cover: image
          -dateModified: 2021-06-13T05:00:00-04:00
          +tags: [regex, string]
          +cover: dog-waiting
          +dateModified: 2023-07-28T01:46:20+0000
           ---
            
            -Explain briefly what the snippet does.
            +Regex (Regular Expression) is a powerful tool for pattern matching and text manipulation in strings.
            +The following function uses regex to return all words in a string beginning with a given character and ending with another given character.
             
             -- Explain briefly how the snippet works.
             -- Use bullet points for your snippet's explanation.
             -- Try to explain everything briefly but clearly.
             +- Initialize a variable `pattern` whose value is determined in the conditional block.
             +- Use `re.findall()` alongside `pattern` to extract all words with the desired terminal characters `char1` and `char2` from `string`.
             +- If `char2` is passed as a parameter in the function call, then `pattern = rf'\b{char1}\w*{char2}\b'`.
             +-  Else, `pattern = rf'\b{char1}\w+'`.
             +-  `re.IGNORECASE` is used for case-insensitive matching, treating uppercase and lowercase letters as the same. For example, `e` is treated the same as `E`.
              
               ```py
                import re
                @@ -27,6 +31,12 @@ def terminal_letter_matches(string, char1, char2=None):
                     return re.findall(pattern, string, re.IGNORECASE)
                      ```
                       
                       +#### Passing both starting and ending characters
                        ```py
                         terminal_letter_matches("Elephants love to dance, but puffins prefer to eat waffles.", 'e', 's') # ['Elephants']
                          ```
                          +
                          +#### Passing only starting character
                          +```py
                          +terminal_letter_matches("Elephants love to dance, but puffins prefer to eat waffles.", 'e') # ['Elephants', 'eat']
                          +``
