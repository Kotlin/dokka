@Deprecated(message = "The dokkaGfmMultiModulePlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun <T : ModuleDependency> DependencyHandler.`dokkaGfmMultiModulePlugin`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaGfmMultiModulePlugin", dependency, dependencyConfiguration)

@Deprecated(message = "The dokkaGfmMultiModulePlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyConstraintHandler.`dokkaGfmMultiModulePlugin`(constraintNotation: Any): DependencyConstraint =
    add("dokkaGfmMultiModulePlugin", constraintNotation)

@Deprecated(message = "The dokkaGfmMultiModulePlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyConstraintHandler.`dokkaGfmMultiModulePlugin`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaGfmMultiModulePlugin", constraintNotation, block)

@Deprecated(message = "The dokkaGfmMultiModulePlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyHandler.`dokkaGfmMultiModulePlugin`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaGfmMultiModulePlugin", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaGfmMultiModulePlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyHandler.`dokkaGfmMultiModulePlugin`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaGfmMultiModulePlugin", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaGfmMultiModulePlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyHandler.`dokkaGfmMultiModulePlugin`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaGfmMultiModulePlugin", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

@Deprecated(message = "The dokkaGfmMultiModulePlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyHandler.`dokkaGfmMultiModulePlugin`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaGfmMultiModulePlugin", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

@Deprecated(message = "The dokkaGfmMultiModulePlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyHandler.`dokkaGfmMultiModulePlugin`(dependencyNotation: Any): Dependency? =
    add("dokkaGfmMultiModulePlugin", dependencyNotation)

@Deprecated(message = "The dokkaGfmMultiModuleRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorRuntime' configuration instead.")
fun <T : ModuleDependency> DependencyHandler.`dokkaGfmMultiModuleRuntime`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaGfmMultiModuleRuntime", dependency, dependencyConfiguration)

@Deprecated(message = "The dokkaGfmMultiModuleRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorRuntime' configuration instead.")
fun DependencyConstraintHandler.`dokkaGfmMultiModuleRuntime`(constraintNotation: Any): DependencyConstraint =
    add("dokkaGfmMultiModuleRuntime", constraintNotation)

@Deprecated(message = "The dokkaGfmMultiModuleRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorRuntime' configuration instead.")
fun DependencyConstraintHandler.`dokkaGfmMultiModuleRuntime`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaGfmMultiModuleRuntime", constraintNotation, block)

@Deprecated(message = "The dokkaGfmMultiModuleRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaGfmMultiModuleRuntime`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaGfmMultiModuleRuntime", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaGfmMultiModuleRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaGfmMultiModuleRuntime`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaGfmMultiModuleRuntime", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaGfmMultiModuleRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaGfmMultiModuleRuntime`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaGfmMultiModuleRuntime", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

@Deprecated(message = "The dokkaGfmMultiModuleRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaGfmMultiModuleRuntime`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaGfmMultiModuleRuntime", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

@Deprecated(message = "The dokkaGfmMultiModuleRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaGfmMultiModuleRuntime`(dependencyNotation: Any): Dependency? =
    add("dokkaGfmMultiModuleRuntime", dependencyNotation)

@Deprecated(message = "The dokkaGfmPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun <T : ModuleDependency> DependencyHandler.`dokkaGfmPartialPlugin`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaGfmPartialPlugin", dependency, dependencyConfiguration)

@Deprecated(message = "The dokkaGfmPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyConstraintHandler.`dokkaGfmPartialPlugin`(constraintNotation: Any): DependencyConstraint =
    add("dokkaGfmPartialPlugin", constraintNotation)

@Deprecated(message = "The dokkaGfmPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyConstraintHandler.`dokkaGfmPartialPlugin`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaGfmPartialPlugin", constraintNotation, block)

@Deprecated(message = "The dokkaGfmPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyHandler.`dokkaGfmPartialPlugin`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaGfmPartialPlugin", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaGfmPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyHandler.`dokkaGfmPartialPlugin`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaGfmPartialPlugin", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaGfmPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyHandler.`dokkaGfmPartialPlugin`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaGfmPartialPlugin", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

@Deprecated(message = "The dokkaGfmPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyHandler.`dokkaGfmPartialPlugin`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaGfmPartialPlugin", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

@Deprecated(message = "The dokkaGfmPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyHandler.`dokkaGfmPartialPlugin`(dependencyNotation: Any): Dependency? =
    add("dokkaGfmPartialPlugin", dependencyNotation)

@Deprecated(message = "The dokkaGfmPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorRuntime' configuration instead.")
fun <T : ModuleDependency> DependencyHandler.`dokkaGfmPartialRuntime`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaGfmPartialRuntime", dependency, dependencyConfiguration)

@Deprecated(message = "The dokkaGfmPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorRuntime' configuration instead.")
fun DependencyConstraintHandler.`dokkaGfmPartialRuntime`(constraintNotation: Any): DependencyConstraint =
    add("dokkaGfmPartialRuntime", constraintNotation)

@Deprecated(message = "The dokkaGfmPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorRuntime' configuration instead.")
fun DependencyConstraintHandler.`dokkaGfmPartialRuntime`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaGfmPartialRuntime", constraintNotation, block)

@Deprecated(message = "The dokkaGfmPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaGfmPartialRuntime`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaGfmPartialRuntime", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaGfmPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaGfmPartialRuntime`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaGfmPartialRuntime", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaGfmPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaGfmPartialRuntime`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaGfmPartialRuntime", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

@Deprecated(message = "The dokkaGfmPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaGfmPartialRuntime`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaGfmPartialRuntime", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

@Deprecated(message = "The dokkaGfmPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaGfmPartialRuntime`(dependencyNotation: Any): Dependency? =
    add("dokkaGfmPartialRuntime", dependencyNotation)

@Deprecated(message = "The dokkaGfmPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun <T : ModuleDependency> DependencyHandler.`dokkaGfmPlugin`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaGfmPlugin", dependency, dependencyConfiguration)

@Deprecated(message = "The dokkaGfmPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyConstraintHandler.`dokkaGfmPlugin`(constraintNotation: Any): DependencyConstraint =
    add("dokkaGfmPlugin", constraintNotation)

@Deprecated(message = "The dokkaGfmPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyConstraintHandler.`dokkaGfmPlugin`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaGfmPlugin", constraintNotation, block)

@Deprecated(message = "The dokkaGfmPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyHandler.`dokkaGfmPlugin`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaGfmPlugin", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaGfmPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyHandler.`dokkaGfmPlugin`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaGfmPlugin", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaGfmPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyHandler.`dokkaGfmPlugin`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaGfmPlugin", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

@Deprecated(message = "The dokkaGfmPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyHandler.`dokkaGfmPlugin`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaGfmPlugin", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

@Deprecated(message = "The dokkaGfmPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmPlugin' configuration instead.")
fun DependencyHandler.`dokkaGfmPlugin`(dependencyNotation: Any): Dependency? =
    add("dokkaGfmPlugin", dependencyNotation)

@Deprecated(message = "The dokkaGfmRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorRuntime' configuration instead.")
fun <T : ModuleDependency> DependencyHandler.`dokkaGfmRuntime`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaGfmRuntime", dependency, dependencyConfiguration)

@Deprecated(message = "The dokkaGfmRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorRuntime' configuration instead.")
fun DependencyConstraintHandler.`dokkaGfmRuntime`(constraintNotation: Any): DependencyConstraint =
    add("dokkaGfmRuntime", constraintNotation)

@Deprecated(message = "The dokkaGfmRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorRuntime' configuration instead.")
fun DependencyConstraintHandler.`dokkaGfmRuntime`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaGfmRuntime", constraintNotation, block)

@Deprecated(message = "The dokkaGfmRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaGfmRuntime`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaGfmRuntime", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaGfmRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaGfmRuntime`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaGfmRuntime", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaGfmRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaGfmRuntime`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaGfmRuntime", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

@Deprecated(message = "The dokkaGfmRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaGfmRuntime`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaGfmRuntime", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

@Deprecated(message = "The dokkaGfmRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGfmGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaGfmRuntime`(dependencyNotation: Any): Dependency? =
    add("dokkaGfmRuntime", dependencyNotation)

@Deprecated(message = "The dokkaHtmlMultiModulePlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlPlugin' configuration instead.")
fun <T : ModuleDependency> DependencyHandler.`dokkaHtmlMultiModulePlugin`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaHtmlMultiModulePlugin", dependency, dependencyConfiguration)

@Deprecated(message = "The dokkaHtmlMultiModulePlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlPlugin' configuration instead.")
fun DependencyConstraintHandler.`dokkaHtmlMultiModulePlugin`(constraintNotation: Any): DependencyConstraint =
    add("dokkaHtmlMultiModulePlugin", constraintNotation)

@Deprecated(message = "The dokkaHtmlMultiModulePlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlPlugin' configuration instead.")
fun DependencyConstraintHandler.`dokkaHtmlMultiModulePlugin`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaHtmlMultiModulePlugin", constraintNotation, block)

@Deprecated(message = "The dokkaHtmlMultiModulePlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlPlugin' configuration instead.")
fun DependencyHandler.`dokkaHtmlMultiModulePlugin`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaHtmlMultiModulePlugin", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaHtmlMultiModulePlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlPlugin' configuration instead.")
fun DependencyHandler.`dokkaHtmlMultiModulePlugin`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaHtmlMultiModulePlugin", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaHtmlMultiModulePlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlPlugin' configuration instead.")
fun DependencyHandler.`dokkaHtmlMultiModulePlugin`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaHtmlMultiModulePlugin", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

@Deprecated(message = "The dokkaHtmlMultiModulePlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlPlugin' configuration instead.")
fun DependencyHandler.`dokkaHtmlMultiModulePlugin`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaHtmlMultiModulePlugin", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

@Deprecated(message = "The dokkaHtmlMultiModulePlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlPlugin' configuration instead.")
fun DependencyHandler.`dokkaHtmlMultiModulePlugin`(dependencyNotation: Any): Dependency? =
    add("dokkaHtmlMultiModulePlugin", dependencyNotation)

@Deprecated(message = "The dokkaHtmlMultiModuleRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorRuntime' configuration instead.")
fun <T : ModuleDependency> DependencyHandler.`dokkaHtmlMultiModuleRuntime`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaHtmlMultiModuleRuntime", dependency, dependencyConfiguration)

@Deprecated(message = "The dokkaHtmlMultiModuleRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorRuntime' configuration instead.")
fun DependencyConstraintHandler.`dokkaHtmlMultiModuleRuntime`(constraintNotation: Any): DependencyConstraint =
    add("dokkaHtmlMultiModuleRuntime", constraintNotation)

@Deprecated(message = "The dokkaHtmlMultiModuleRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorRuntime' configuration instead.")
fun DependencyConstraintHandler.`dokkaHtmlMultiModuleRuntime`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaHtmlMultiModuleRuntime", constraintNotation, block)

@Deprecated(message = "The dokkaHtmlMultiModuleRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaHtmlMultiModuleRuntime`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaHtmlMultiModuleRuntime", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaHtmlMultiModuleRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaHtmlMultiModuleRuntime`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaHtmlMultiModuleRuntime", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaHtmlMultiModuleRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaHtmlMultiModuleRuntime`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaHtmlMultiModuleRuntime", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

@Deprecated(message = "The dokkaHtmlMultiModuleRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaHtmlMultiModuleRuntime`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaHtmlMultiModuleRuntime", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

@Deprecated(message = "The dokkaHtmlMultiModuleRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaHtmlMultiModuleRuntime`(dependencyNotation: Any): Dependency? =
    add("dokkaHtmlMultiModuleRuntime", dependencyNotation)

@Deprecated(message = "The dokkaHtmlPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlPlugin' configuration instead.")
fun <T : ModuleDependency> DependencyHandler.`dokkaHtmlPartialPlugin`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaHtmlPartialPlugin", dependency, dependencyConfiguration)

@Deprecated(message = "The dokkaHtmlPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlPlugin' configuration instead.")
fun DependencyConstraintHandler.`dokkaHtmlPartialPlugin`(constraintNotation: Any): DependencyConstraint =
    add("dokkaHtmlPartialPlugin", constraintNotation)

@Deprecated(message = "The dokkaHtmlPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlPlugin' configuration instead.")
fun DependencyConstraintHandler.`dokkaHtmlPartialPlugin`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaHtmlPartialPlugin", constraintNotation, block)

@Deprecated(message = "The dokkaHtmlPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlPlugin' configuration instead.")
fun DependencyHandler.`dokkaHtmlPartialPlugin`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaHtmlPartialPlugin", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaHtmlPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlPlugin' configuration instead.")
fun DependencyHandler.`dokkaHtmlPartialPlugin`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaHtmlPartialPlugin", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaHtmlPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlPlugin' configuration instead.")
fun DependencyHandler.`dokkaHtmlPartialPlugin`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaHtmlPartialPlugin", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

@Deprecated(message = "The dokkaHtmlPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlPlugin' configuration instead.")
fun DependencyHandler.`dokkaHtmlPartialPlugin`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaHtmlPartialPlugin", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

@Deprecated(message = "The dokkaHtmlPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlPlugin' configuration instead.")
fun DependencyHandler.`dokkaHtmlPartialPlugin`(dependencyNotation: Any): Dependency? =
    add("dokkaHtmlPartialPlugin", dependencyNotation)

@Deprecated(message = "The dokkaHtmlPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorRuntime' configuration instead.")
fun <T : ModuleDependency> DependencyHandler.`dokkaHtmlPartialRuntime`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaHtmlPartialRuntime", dependency, dependencyConfiguration)

@Deprecated(message = "The dokkaHtmlPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorRuntime' configuration instead.")
fun DependencyConstraintHandler.`dokkaHtmlPartialRuntime`(constraintNotation: Any): DependencyConstraint =
    add("dokkaHtmlPartialRuntime", constraintNotation)

@Deprecated(message = "The dokkaHtmlPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorRuntime' configuration instead.")
fun DependencyConstraintHandler.`dokkaHtmlPartialRuntime`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaHtmlPartialRuntime", constraintNotation, block)

@Deprecated(message = "The dokkaHtmlPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaHtmlPartialRuntime`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaHtmlPartialRuntime", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaHtmlPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaHtmlPartialRuntime`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaHtmlPartialRuntime", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaHtmlPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaHtmlPartialRuntime`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaHtmlPartialRuntime", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

@Deprecated(message = "The dokkaHtmlPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaHtmlPartialRuntime`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaHtmlPartialRuntime", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

@Deprecated(message = "The dokkaHtmlPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaHtmlGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaHtmlPartialRuntime`(dependencyNotation: Any): Dependency? =
    add("dokkaHtmlPartialRuntime", dependencyNotation)

@Deprecated(message = "The dokkaJavadocPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocPlugin' configuration instead.")
fun <T : ModuleDependency> DependencyHandler.`dokkaJavadocPartialPlugin`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaJavadocPartialPlugin", dependency, dependencyConfiguration)

@Deprecated(message = "The dokkaJavadocPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocPlugin' configuration instead.")
fun DependencyConstraintHandler.`dokkaJavadocPartialPlugin`(constraintNotation: Any): DependencyConstraint =
    add("dokkaJavadocPartialPlugin", constraintNotation)

@Deprecated(message = "The dokkaJavadocPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocPlugin' configuration instead.")
fun DependencyConstraintHandler.`dokkaJavadocPartialPlugin`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaJavadocPartialPlugin", constraintNotation, block)

@Deprecated(message = "The dokkaJavadocPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocPlugin' configuration instead.")
fun DependencyHandler.`dokkaJavadocPartialPlugin`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaJavadocPartialPlugin", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaJavadocPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocPlugin' configuration instead.")
fun DependencyHandler.`dokkaJavadocPartialPlugin`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaJavadocPartialPlugin", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaJavadocPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocPlugin' configuration instead.")
fun DependencyHandler.`dokkaJavadocPartialPlugin`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaJavadocPartialPlugin", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

@Deprecated(message = "The dokkaJavadocPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocPlugin' configuration instead.")
fun DependencyHandler.`dokkaJavadocPartialPlugin`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaJavadocPartialPlugin", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

@Deprecated(message = "The dokkaJavadocPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocPlugin' configuration instead.")
fun DependencyHandler.`dokkaJavadocPartialPlugin`(dependencyNotation: Any): Dependency? =
    add("dokkaJavadocPartialPlugin", dependencyNotation)

@Deprecated(message = "The dokkaJavadocPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocGeneratorRuntime' configuration instead.")
fun <T : ModuleDependency> DependencyHandler.`dokkaJavadocPartialRuntime`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaJavadocPartialRuntime", dependency, dependencyConfiguration)

@Deprecated(message = "The dokkaJavadocPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocGeneratorRuntime' configuration instead.")
fun DependencyConstraintHandler.`dokkaJavadocPartialRuntime`(constraintNotation: Any): DependencyConstraint =
    add("dokkaJavadocPartialRuntime", constraintNotation)

@Deprecated(message = "The dokkaJavadocPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocGeneratorRuntime' configuration instead.")
fun DependencyConstraintHandler.`dokkaJavadocPartialRuntime`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaJavadocPartialRuntime", constraintNotation, block)

@Deprecated(message = "The dokkaJavadocPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaJavadocPartialRuntime`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaJavadocPartialRuntime", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaJavadocPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaJavadocPartialRuntime`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaJavadocPartialRuntime", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaJavadocPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaJavadocPartialRuntime`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaJavadocPartialRuntime", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

@Deprecated(message = "The dokkaJavadocPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaJavadocPartialRuntime`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaJavadocPartialRuntime", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

@Deprecated(message = "The dokkaJavadocPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJavadocGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaJavadocPartialRuntime`(dependencyNotation: Any): Dependency? =
    add("dokkaJavadocPartialRuntime", dependencyNotation)

@Deprecated(message = "The dokkaJekyllMultiModulePlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun <T : ModuleDependency> DependencyHandler.`dokkaJekyllMultiModulePlugin`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaJekyllMultiModulePlugin", dependency, dependencyConfiguration)

@Deprecated(message = "The dokkaJekyllMultiModulePlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyConstraintHandler.`dokkaJekyllMultiModulePlugin`(constraintNotation: Any): DependencyConstraint =
    add("dokkaJekyllMultiModulePlugin", constraintNotation)

@Deprecated(message = "The dokkaJekyllMultiModulePlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyConstraintHandler.`dokkaJekyllMultiModulePlugin`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaJekyllMultiModulePlugin", constraintNotation, block)

@Deprecated(message = "The dokkaJekyllMultiModulePlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyHandler.`dokkaJekyllMultiModulePlugin`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaJekyllMultiModulePlugin", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaJekyllMultiModulePlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyHandler.`dokkaJekyllMultiModulePlugin`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaJekyllMultiModulePlugin", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaJekyllMultiModulePlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyHandler.`dokkaJekyllMultiModulePlugin`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaJekyllMultiModulePlugin", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

@Deprecated(message = "The dokkaJekyllMultiModulePlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyHandler.`dokkaJekyllMultiModulePlugin`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaJekyllMultiModulePlugin", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

@Deprecated(message = "The dokkaJekyllMultiModulePlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyHandler.`dokkaJekyllMultiModulePlugin`(dependencyNotation: Any): Dependency? =
    add("dokkaJekyllMultiModulePlugin", dependencyNotation)

@Deprecated(message = "The dokkaJekyllMultiModuleRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorRuntime' configuration instead.")
fun <T : ModuleDependency> DependencyHandler.`dokkaJekyllMultiModuleRuntime`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaJekyllMultiModuleRuntime", dependency, dependencyConfiguration)

@Deprecated(message = "The dokkaJekyllMultiModuleRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorRuntime' configuration instead.")
fun DependencyConstraintHandler.`dokkaJekyllMultiModuleRuntime`(constraintNotation: Any): DependencyConstraint =
    add("dokkaJekyllMultiModuleRuntime", constraintNotation)

@Deprecated(message = "The dokkaJekyllMultiModuleRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorRuntime' configuration instead.")
fun DependencyConstraintHandler.`dokkaJekyllMultiModuleRuntime`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaJekyllMultiModuleRuntime", constraintNotation, block)

@Deprecated(message = "The dokkaJekyllMultiModuleRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaJekyllMultiModuleRuntime`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaJekyllMultiModuleRuntime", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaJekyllMultiModuleRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaJekyllMultiModuleRuntime`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaJekyllMultiModuleRuntime", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaJekyllMultiModuleRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaJekyllMultiModuleRuntime`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaJekyllMultiModuleRuntime", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

@Deprecated(message = "The dokkaJekyllMultiModuleRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaJekyllMultiModuleRuntime`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaJekyllMultiModuleRuntime", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

@Deprecated(message = "The dokkaJekyllMultiModuleRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaJekyllMultiModuleRuntime`(dependencyNotation: Any): Dependency? =
    add("dokkaJekyllMultiModuleRuntime", dependencyNotation)

@Deprecated(message = "The dokkaJekyllPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun <T : ModuleDependency> DependencyHandler.`dokkaJekyllPartialPlugin`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaJekyllPartialPlugin", dependency, dependencyConfiguration)

@Deprecated(message = "The dokkaJekyllPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyConstraintHandler.`dokkaJekyllPartialPlugin`(constraintNotation: Any): DependencyConstraint =
    add("dokkaJekyllPartialPlugin", constraintNotation)

@Deprecated(message = "The dokkaJekyllPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyConstraintHandler.`dokkaJekyllPartialPlugin`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaJekyllPartialPlugin", constraintNotation, block)

@Deprecated(message = "The dokkaJekyllPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyHandler.`dokkaJekyllPartialPlugin`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaJekyllPartialPlugin", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaJekyllPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyHandler.`dokkaJekyllPartialPlugin`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaJekyllPartialPlugin", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaJekyllPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyHandler.`dokkaJekyllPartialPlugin`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaJekyllPartialPlugin", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

@Deprecated(message = "The dokkaJekyllPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyHandler.`dokkaJekyllPartialPlugin`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaJekyllPartialPlugin", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

@Deprecated(message = "The dokkaJekyllPartialPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyHandler.`dokkaJekyllPartialPlugin`(dependencyNotation: Any): Dependency? =
    add("dokkaJekyllPartialPlugin", dependencyNotation)

@Deprecated(message = "The dokkaJekyllPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorRuntime' configuration instead.")
fun <T : ModuleDependency> DependencyHandler.`dokkaJekyllPartialRuntime`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaJekyllPartialRuntime", dependency, dependencyConfiguration)

@Deprecated(message = "The dokkaJekyllPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorRuntime' configuration instead.")
fun DependencyConstraintHandler.`dokkaJekyllPartialRuntime`(constraintNotation: Any): DependencyConstraint =
    add("dokkaJekyllPartialRuntime", constraintNotation)

@Deprecated(message = "The dokkaJekyllPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorRuntime' configuration instead.")
fun DependencyConstraintHandler.`dokkaJekyllPartialRuntime`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaJekyllPartialRuntime", constraintNotation, block)

@Deprecated(message = "The dokkaJekyllPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaJekyllPartialRuntime`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaJekyllPartialRuntime", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaJekyllPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaJekyllPartialRuntime`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaJekyllPartialRuntime", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaJekyllPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaJekyllPartialRuntime`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaJekyllPartialRuntime", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

@Deprecated(message = "The dokkaJekyllPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaJekyllPartialRuntime`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaJekyllPartialRuntime", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

@Deprecated(message = "The dokkaJekyllPartialRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaJekyllPartialRuntime`(dependencyNotation: Any): Dependency? =
    add("dokkaJekyllPartialRuntime", dependencyNotation)

@Deprecated(message = "The dokkaJekyllPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun <T : ModuleDependency> DependencyHandler.`dokkaJekyllPlugin`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaJekyllPlugin", dependency, dependencyConfiguration)

@Deprecated(message = "The dokkaJekyllPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyConstraintHandler.`dokkaJekyllPlugin`(constraintNotation: Any): DependencyConstraint =
    add("dokkaJekyllPlugin", constraintNotation)

@Deprecated(message = "The dokkaJekyllPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyConstraintHandler.`dokkaJekyllPlugin`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaJekyllPlugin", constraintNotation, block)

@Deprecated(message = "The dokkaJekyllPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyHandler.`dokkaJekyllPlugin`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaJekyllPlugin", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaJekyllPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyHandler.`dokkaJekyllPlugin`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaJekyllPlugin", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaJekyllPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyHandler.`dokkaJekyllPlugin`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaJekyllPlugin", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

@Deprecated(message = "The dokkaJekyllPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyHandler.`dokkaJekyllPlugin`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaJekyllPlugin", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

@Deprecated(message = "The dokkaJekyllPlugin configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllPlugin' configuration instead.")
fun DependencyHandler.`dokkaJekyllPlugin`(dependencyNotation: Any): Dependency? =
    add("dokkaJekyllPlugin", dependencyNotation)

@Deprecated(message = "The dokkaJekyllRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorRuntime' configuration instead.")
fun <T : ModuleDependency> DependencyHandler.`dokkaJekyllRuntime`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaJekyllRuntime", dependency, dependencyConfiguration)

@Deprecated(message = "The dokkaJekyllRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorRuntime' configuration instead.")
fun DependencyConstraintHandler.`dokkaJekyllRuntime`(constraintNotation: Any): DependencyConstraint =
    add("dokkaJekyllRuntime", constraintNotation)

@Deprecated(message = "The dokkaJekyllRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorRuntime' configuration instead.")
fun DependencyConstraintHandler.`dokkaJekyllRuntime`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaJekyllRuntime", constraintNotation, block)

@Deprecated(message = "The dokkaJekyllRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaJekyllRuntime`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaJekyllRuntime", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaJekyllRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaJekyllRuntime`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaJekyllRuntime", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaJekyllRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaJekyllRuntime`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaJekyllRuntime", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

@Deprecated(message = "The dokkaJekyllRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaJekyllRuntime`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaJekyllRuntime", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

@Deprecated(message = "The dokkaJekyllRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaJekyllGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaJekyllRuntime`(dependencyNotation: Any): Dependency? =
    add("dokkaJekyllRuntime", dependencyNotation)

@Deprecated(message = "The dokkaRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGeneratorRuntime' configuration instead.")
fun <T : ModuleDependency> DependencyHandler.`dokkaRuntime`(
    dependency: T,
    dependencyConfiguration: T.() -> Unit
): T = add("dokkaRuntime", dependency, dependencyConfiguration)

@Deprecated(message = "The dokkaRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGeneratorRuntime' configuration instead.")
fun DependencyConstraintHandler.`dokkaRuntime`(constraintNotation: Any): DependencyConstraint =
    add("dokkaRuntime", constraintNotation)

@Deprecated(message = "The dokkaRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGeneratorRuntime' configuration instead.")
fun DependencyConstraintHandler.`dokkaRuntime`(constraintNotation: Any, block: DependencyConstraint.() -> Unit): DependencyConstraint =
    add("dokkaRuntime", constraintNotation, block)

@Deprecated(message = "The dokkaRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaRuntime`(
    dependencyNotation: Provider<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaRuntime", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaRuntime`(
    dependencyNotation: ProviderConvertible<*>,
    dependencyConfiguration: Action<ExternalModuleDependency>
): Unit = addConfiguredDependencyTo(
    this, "dokkaRuntime", dependencyNotation, dependencyConfiguration
)

@Deprecated(message = "The dokkaRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaRuntime`(
    dependencyNotation: String,
    dependencyConfiguration: Action<ExternalModuleDependency>
): ExternalModuleDependency = addDependencyTo(
    this, "dokkaRuntime", dependencyNotation, dependencyConfiguration
) as ExternalModuleDependency

@Deprecated(message = "The dokkaRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaRuntime`(
    group: String,
    name: String,
    version: String? = null,
    configuration: String? = null,
    classifier: String? = null,
    ext: String? = null,
    dependencyConfiguration: Action<ExternalModuleDependency>? = null
): ExternalModuleDependency = addExternalModuleDependencyTo(
    this, "dokkaRuntime", group, name, version, configuration, classifier, ext, dependencyConfiguration
)

@Deprecated(message = "The dokkaRuntime configuration has been deprecated for dependency declaration. Please use the 'dokkaGeneratorRuntime' configuration instead.")
fun DependencyHandler.`dokkaRuntime`(dependencyNotation: Any): Dependency? =
    add("dokkaRuntime", dependencyNotation)

fun ArtifactHandler.`dokkaGfmMultiModulePlugin`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaGfmMultiModulePlugin", artifactNotation, configureAction)

fun ArtifactHandler.`dokkaGfmMultiModulePlugin`(artifactNotation: Any): PublishArtifact =
    add("dokkaGfmMultiModulePlugin", artifactNotation)

fun ArtifactHandler.`dokkaGfmMultiModuleRuntime`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaGfmMultiModuleRuntime", artifactNotation, configureAction)

fun ArtifactHandler.`dokkaGfmMultiModuleRuntime`(artifactNotation: Any): PublishArtifact =
    add("dokkaGfmMultiModuleRuntime", artifactNotation)

fun ArtifactHandler.`dokkaGfmPartialPlugin`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaGfmPartialPlugin", artifactNotation, configureAction)

fun ArtifactHandler.`dokkaGfmPartialPlugin`(artifactNotation: Any): PublishArtifact =
    add("dokkaGfmPartialPlugin", artifactNotation)

fun ArtifactHandler.`dokkaGfmPartialRuntime`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaGfmPartialRuntime", artifactNotation, configureAction)

fun ArtifactHandler.`dokkaGfmPartialRuntime`(artifactNotation: Any): PublishArtifact =
    add("dokkaGfmPartialRuntime", artifactNotation)

fun ArtifactHandler.`dokkaGfmPlugin`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaGfmPlugin", artifactNotation, configureAction)

fun ArtifactHandler.`dokkaGfmPlugin`(artifactNotation: Any): PublishArtifact =
    add("dokkaGfmPlugin", artifactNotation)

fun ArtifactHandler.`dokkaGfmRuntime`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaGfmRuntime", artifactNotation, configureAction)

fun ArtifactHandler.`dokkaGfmRuntime`(artifactNotation: Any): PublishArtifact =
    add("dokkaGfmRuntime", artifactNotation)

fun ArtifactHandler.`dokkaHtmlMultiModulePlugin`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaHtmlMultiModulePlugin", artifactNotation, configureAction)

fun ArtifactHandler.`dokkaHtmlMultiModulePlugin`(artifactNotation: Any): PublishArtifact =
    add("dokkaHtmlMultiModulePlugin", artifactNotation)

fun ArtifactHandler.`dokkaHtmlMultiModuleRuntime`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaHtmlMultiModuleRuntime", artifactNotation, configureAction)

fun ArtifactHandler.`dokkaHtmlMultiModuleRuntime`(artifactNotation: Any): PublishArtifact =
    add("dokkaHtmlMultiModuleRuntime", artifactNotation)

fun ArtifactHandler.`dokkaHtmlPartialPlugin`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaHtmlPartialPlugin", artifactNotation, configureAction)

fun ArtifactHandler.`dokkaHtmlPartialPlugin`(artifactNotation: Any): PublishArtifact =
    add("dokkaHtmlPartialPlugin", artifactNotation)

fun ArtifactHandler.`dokkaHtmlPartialRuntime`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaHtmlPartialRuntime", artifactNotation, configureAction)

fun ArtifactHandler.`dokkaHtmlPartialRuntime`(artifactNotation: Any): PublishArtifact =
    add("dokkaHtmlPartialRuntime", artifactNotation)

fun ArtifactHandler.`dokkaJavadocPartialPlugin`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaJavadocPartialPlugin", artifactNotation, configureAction)

fun ArtifactHandler.`dokkaJavadocPartialPlugin`(artifactNotation: Any): PublishArtifact =
    add("dokkaJavadocPartialPlugin", artifactNotation)

fun ArtifactHandler.`dokkaJavadocPartialRuntime`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaJavadocPartialRuntime", artifactNotation, configureAction)

fun ArtifactHandler.`dokkaJavadocPartialRuntime`(artifactNotation: Any): PublishArtifact =
    add("dokkaJavadocPartialRuntime", artifactNotation)

fun ArtifactHandler.`dokkaJekyllMultiModulePlugin`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaJekyllMultiModulePlugin", artifactNotation, configureAction)

fun ArtifactHandler.`dokkaJekyllMultiModulePlugin`(artifactNotation: Any): PublishArtifact =
    add("dokkaJekyllMultiModulePlugin", artifactNotation)

fun ArtifactHandler.`dokkaJekyllMultiModuleRuntime`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaJekyllMultiModuleRuntime", artifactNotation, configureAction)

fun ArtifactHandler.`dokkaJekyllMultiModuleRuntime`(artifactNotation: Any): PublishArtifact =
    add("dokkaJekyllMultiModuleRuntime", artifactNotation)

fun ArtifactHandler.`dokkaJekyllPartialPlugin`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaJekyllPartialPlugin", artifactNotation, configureAction)

fun ArtifactHandler.`dokkaJekyllPartialPlugin`(artifactNotation: Any): PublishArtifact =
    add("dokkaJekyllPartialPlugin", artifactNotation)

fun ArtifactHandler.`dokkaJekyllPartialRuntime`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaJekyllPartialRuntime", artifactNotation, configureAction)

fun ArtifactHandler.`dokkaJekyllPartialRuntime`(artifactNotation: Any): PublishArtifact =
    add("dokkaJekyllPartialRuntime", artifactNotation)

fun ArtifactHandler.`dokkaJekyllPlugin`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaJekyllPlugin", artifactNotation, configureAction)

fun ArtifactHandler.`dokkaJekyllPlugin`(artifactNotation: Any): PublishArtifact =
    add("dokkaJekyllPlugin", artifactNotation)

fun ArtifactHandler.`dokkaJekyllRuntime`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaJekyllRuntime", artifactNotation, configureAction)

fun ArtifactHandler.`dokkaJekyllRuntime`(artifactNotation: Any): PublishArtifact =
    add("dokkaJekyllRuntime", artifactNotation)

fun ArtifactHandler.`dokkaRuntime`(
    artifactNotation: Any,
    configureAction:  ConfigurablePublishArtifact.() -> Unit
): PublishArtifact =
    add("dokkaRuntime", artifactNotation, configureAction)

fun ArtifactHandler.`dokkaRuntime`(artifactNotation: Any): PublishArtifact =
    add("dokkaRuntime", artifactNotation)

val TaskContainer.`dokkaGfmCollector`: TaskProvider<org.jetbrains.dokka.gradle.DokkaCollectorTask>
    get() = named<org.jetbrains.dokka.gradle.DokkaCollectorTask>("dokkaGfmCollector")

val TaskContainer.`dokkaGfmMultiModule`: TaskProvider<org.jetbrains.dokka.gradle.DokkaMultiModuleTask>
    get() = named<org.jetbrains.dokka.gradle.DokkaMultiModuleTask>("dokkaGfmMultiModule")

val TaskContainer.`dokkaGfmPartial`: TaskProvider<org.jetbrains.dokka.gradle.DokkaTaskPartial>
    get() = named<org.jetbrains.dokka.gradle.DokkaTaskPartial>("dokkaGfmPartial")

val TaskContainer.`dokkaGfm`: TaskProvider<org.jetbrains.dokka.gradle.DokkaTask>
    get() = named<org.jetbrains.dokka.gradle.DokkaTask>("dokkaGfm")

val TaskContainer.`dokkaHtmlCollector`: TaskProvider<org.jetbrains.dokka.gradle.DokkaCollectorTask>
    get() = named<org.jetbrains.dokka.gradle.DokkaCollectorTask>("dokkaHtmlCollector")

val TaskContainer.`dokkaHtmlMultiModule`: TaskProvider<org.jetbrains.dokka.gradle.DokkaMultiModuleTask>
    get() = named<org.jetbrains.dokka.gradle.DokkaMultiModuleTask>("dokkaHtmlMultiModule")

val TaskContainer.`dokkaHtmlPartial`: TaskProvider<org.jetbrains.dokka.gradle.DokkaTaskPartial>
    get() = named<org.jetbrains.dokka.gradle.DokkaTaskPartial>("dokkaHtmlPartial")

val TaskContainer.`dokkaHtml`: TaskProvider<org.jetbrains.dokka.gradle.DokkaTask>
    get() = named<org.jetbrains.dokka.gradle.DokkaTask>("dokkaHtml")

val TaskContainer.`dokkaJavadocCollector`: TaskProvider<org.jetbrains.dokka.gradle.DokkaCollectorTask>
    get() = named<org.jetbrains.dokka.gradle.DokkaCollectorTask>("dokkaJavadocCollector")

val TaskContainer.`dokkaJavadocPartial`: TaskProvider<org.jetbrains.dokka.gradle.DokkaTaskPartial>
    get() = named<org.jetbrains.dokka.gradle.DokkaTaskPartial>("dokkaJavadocPartial")

val TaskContainer.`dokkaJavadoc`: TaskProvider<org.jetbrains.dokka.gradle.DokkaTask>
    get() = named<org.jetbrains.dokka.gradle.DokkaTask>("dokkaJavadoc")

val TaskContainer.`dokkaJekyllCollector`: TaskProvider<org.jetbrains.dokka.gradle.DokkaCollectorTask>
    get() = named<org.jetbrains.dokka.gradle.DokkaCollectorTask>("dokkaJekyllCollector")

val TaskContainer.`dokkaJekyllMultiModule`: TaskProvider<org.jetbrains.dokka.gradle.DokkaMultiModuleTask>
    get() = named<org.jetbrains.dokka.gradle.DokkaMultiModuleTask>("dokkaJekyllMultiModule")

val TaskContainer.`dokkaJekyllPartial`: TaskProvider<org.jetbrains.dokka.gradle.DokkaTaskPartial>
    get() = named<org.jetbrains.dokka.gradle.DokkaTaskPartial>("dokkaJekyllPartial")

val TaskContainer.`dokkaJekyll`: TaskProvider<org.jetbrains.dokka.gradle.DokkaTask>
    get() = named<org.jetbrains.dokka.gradle.DokkaTask>("dokkaJekyll")

val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaGfmMultiModulePlugin`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaGfmMultiModulePlugin")

val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaGfmMultiModuleRuntime`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaGfmMultiModuleRuntime")

val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaGfmPartialPlugin`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaGfmPartialPlugin")

val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaGfmPartialRuntime`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaGfmPartialRuntime")

val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaGfmPlugin`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaGfmPlugin")

val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaGfmRuntime`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaGfmRuntime")

val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaHtmlMultiModulePlugin`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaHtmlMultiModulePlugin")

val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaHtmlMultiModuleRuntime`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaHtmlMultiModuleRuntime")

val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaHtmlPartialPlugin`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaHtmlPartialPlugin")

val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaHtmlPartialRuntime`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaHtmlPartialRuntime")

val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaJavadocPartialPlugin`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaJavadocPartialPlugin")

val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaJavadocPartialRuntime`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaJavadocPartialRuntime")

val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaJekyllMultiModulePlugin`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaJekyllMultiModulePlugin")

val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaJekyllMultiModuleRuntime`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaJekyllMultiModuleRuntime")

val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaJekyllPartialPlugin`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaJekyllPartialPlugin")

val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaJekyllPartialRuntime`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaJekyllPartialRuntime")

val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaJekyllPlugin`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaJekyllPlugin")

val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaJekyllRuntime`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaJekyllRuntime")

val org.gradle.api.NamedDomainObjectContainer<org.gradle.api.artifacts.Configuration>.`dokkaRuntime`: NamedDomainObjectProvider<org.gradle.api.artifacts.Configuration>
    get() = named<org.gradle.api.artifacts.Configuration>("dokkaRuntime")
