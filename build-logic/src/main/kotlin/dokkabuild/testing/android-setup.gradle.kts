/*
 * Copyright 2014-2023 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license.
 */
package dokkabuild.testing

/**
 * Utilities for preparing Android projects for Integration Tests
 */

plugins {
    base
}

val localAndroidSdkRoot: DirectoryProperty = objects.directoryProperty().apply {
    convention(layout.projectDirectory.dir("projects/ANDROID_SDK"))
}

/**
 * Create an `local.properties` file so that Android projects will automatically work in integration tests.
 */
abstract class CreateAndroidLocalPropertiesFile : DefaultTask() {
    @get:OutputFile
    abstract val localPropertiesFile: RegularFileProperty

    /**
     * Location of the Android SDK.
     * Will be automatically determined by the environment variable `ANDROID_SDK_ROOT`, or
     */
    @get:Input
    // use a string not a dir because we don't actually care about the contents of the directory
    abstract val androidSdkDirPath: Property<String>

    @TaskAction
    fun action() {
        val taskPath = path

        localPropertiesFile.asFile.get().apply {
            parentFile.mkdirs()
            createNewFile()
            writeText(
                """
                  |# DO NOT EDIT - Generated by $taskPath
                  |
                  |sdk.dir=${androidSdkDirPath.get()}
                  |
                """.trimMargin()
            )
        }
    }
}

val createAndroidLocalPropertiesFile by tasks.registering(CreateAndroidLocalPropertiesFile::class) {
    localPropertiesFile.convention(layout.file(provider { temporaryDir.resolve("local.properties") }))
    androidSdkDirPath.convention(providers
        // first try getting the SDK installed on via GitHub step setup-android
        .environmentVariable("ANDROID_SDK_ROOT").map(::File)
        // else get the project-local SDK
        .orElse(localAndroidSdkRoot.asFile)
        .map { it.invariantSeparatorsPath })
}
