import groovy.xml.QName
import org.jetbrains.CrossPlatformExec


apply plugin: 'kotlin'
apply plugin: 'com.github.johnrengelman.shadow'


configurations {
    provided
}

tasks.withType(AbstractCompile) {
    classpath += configurations.provided
    classpath += configurations.shadow
}

dependencies {
    shadow project(":runners:fatjar")
    shadow "org.apache.maven:maven-core:$maven_version"
    shadow "org.apache.maven:maven-model:$maven_version"
    shadow "org.apache.maven:maven-plugin-api:$maven_version"
    shadow "org.apache.maven:maven-archiver:$maven_archiver_version"
    shadow "org.codehaus.plexus:plexus-utils:$plexus_utils_version"
    shadow "org.codehaus.plexus:plexus-archiver:$plexus_archiver_version"
    shadow "org.apache.maven.plugin-tools:maven-plugin-annotations:$maven_plugin_tools_version"
}

task generatePom << {
    final pomTemplate = new File(projectDir, "pom.tpl.xml")
    final pom = new File(buildDir, "pom.xml")
    pom.text = pomTemplate.text.replace("<version>dokka_version</version>", "<version>$dokka_version</version>")
            .replace("<maven.version></maven.version>", "<maven.version>$maven_version</maven.version>")
            .replace("<version>maven-plugin-plugin</version>", "<version>$maven_plugin_tools_version</version>")
}

task pluginDescriptor(type: CrossPlatformExec) {
    workingDir buildDir
    commandLine mvn, '-e', '-B', 'org.apache.maven.plugins:maven-plugin-plugin:descriptor'
}

task helpMojo(type: CrossPlatformExec) {
    workingDir buildDir
    commandLine mvn, '-e', '-B', 'org.apache.maven.plugins:maven-plugin-plugin:helpmojo'
}


helpMojo.dependsOn generatePom
sourceSets.main.java.srcDir("$buildDir/generated-sources/plugin")
compileJava.dependsOn helpMojo

pluginDescriptor.dependsOn generatePom

shadowJar {
    baseName = 'dokka-maven-plugin'
    classifier = ''
}

shadowJar.dependsOn pluginDescriptor


task sourceJar(type: Jar) {
    from sourceSets.main.allSource
}

apply plugin: 'maven-publish'

publishing {
    publications {
        dokkaMavenPlugin(MavenPublication) {
            from components.shadow
            artifactId = 'dokka-maven-plugin'

            artifact sourceJar {
                classifier "sources"
            }

            pom.withXml {
                Node root = asNode()

                def dependency = new XmlParser().parseText('''
                <dependency>
                    <groupId>com.sun</groupId>
                    <artifactId>tools</artifactId>
                    <version>1.8.0</version>
                    <scope>system</scope>
                    <systemPath>${toolsjar}</systemPath>
                </dependency>
                ''')

                root.children().find {
                    return ((QName) it.name()).qualifiedName == "dependencies"
                }.append(dependency)

                def profiles = new XmlParser().parseText('''
                <profiles>
                    <profile>
                        <id>default-profile</id>
                        <activation>
                            <activeByDefault>true</activeByDefault>
                            <file>
                                <exists>${java.home}/../lib/tools.jar</exists>
                            </file>
                        </activation>
                        <properties>
                            <toolsjar>${java.home}/../lib/tools.jar</toolsjar>
                        </properties>
                    </profile>
                    <profile>
                        <id>mac-profile</id>
                        <activation>
                            <activeByDefault>false</activeByDefault>
                            <file>
                                <exists>${java.home}/../Classes/classes.jar</exists>
                            </file>
                        </activation>
                        <properties>
                            <toolsjar>${java.home}/../Classes/classes.jar</toolsjar>
                        </properties>
                    </profile>
                </profiles>
                ''')
                root.append(profiles)
            }
        }
    }
}

tasks.withType(GenerateMavenPom) { Task generatePom ->
    generatePom.doLast {

    }
}

bintrayPublication(project, ['dokkaMavenPlugin'])